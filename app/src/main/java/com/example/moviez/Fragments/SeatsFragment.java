package com.example.moviez.Fragments;

import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.fragment.app.Fragment;
import androidx.recyclerview.widget.GridLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.example.moviez.Adapters.SeatAdapter;
import com.example.moviez.Models;
import com.example.moviez.R;

import java.util.ArrayList;
import java.util.List;

/**
 * A simple {@link Fragment} subclass.
 * Use the {@link SeatsFragment#newInstance} factory method to
 * create an instance of this fragment.
 */
public class SeatsFragment extends AppFragment {

    public static int frameComingFrom = 0;
    public static int movieid;
    public static String cinemaid;
    public static int roomid;
    public static int day;
    public static int month;
    public static int hour;

    Models.Cinema cinema = new Models.Cinema();

    private RecyclerView seatsGrid;
    private Button buyButton2;
    List<Models.Seats> seats = new ArrayList<>();

    List<Models.Ticket> ticketsToBuy = new ArrayList<>();


    public SeatsFragment() {
        // Required empty public constructor
    }

    public SeatsFragment(int frameComingFrom, int movieid, String cinemaid, int roomid, int day, int month, int hour) {
        this.frameComingFrom = frameComingFrom;
        this.movieid = movieid;
        this.cinemaid = cinemaid;
        this.roomid = roomid;
        this.day = day;
        this.month = month;
        this.hour = hour;
    }

    /**
     * Use this factory method to create a new instance of
     * this fragment using the provided parameters.
     *
     * @param param1 Parameter 1.
     * @param param2 Parameter 2.
     * @return A new instance of fragment SeatsFragment.
     */
    // TODO: Rename and change types and number of parameters
    public static SeatsFragment newInstance(String param1, String param2) {
        SeatsFragment fragment = new SeatsFragment();
        Bundle args = new Bundle();
        fragment.setArguments(args);
        return fragment;
    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
    }

    private void hook(View view) {
        seatsGrid = view.findViewById(R.id.seatsGrid);
        buyButton2 = view.findViewById(R.id.buyButton2);
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        // Inflate the layout for this fragment
        return inflater.inflate(R.layout.fragment_seats, container, false);
    }

    @Override
    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);
        hook(view);
        insertDefaultSeats();
        buyButton2.setOnClickListener(view1 -> {

            createTicketsForSelectedSeats();
        });
    }

    private void createTicketsForSelectedSeats() {
        for (Models.Seats seat : seats) {
            if (seat.state.equals(Models.SeatState.SELECTED)) {
                Models.Ticket ticket = new Models.Ticket();

//                    Get the cinema data from db:
                db.collection("cinemas").document(cinemaid).get().addOnCompleteListener(task -> {
                    if (task.isSuccessful()) {
                        if (task.getResult().exists()) {
                            cinema = task.getResult().toObject(Models.Cinema.class);
                            ticket.cinemaCoords = cinema.coords;
                            ticket.cinemaName = cinema.name;
                        }
                    }
                });

//                    Ticketid will be generated by the firebase database (so it will be assigned when the ticket is added to the database):
                ticket.filmid = movieid;
                ticket.userid = auth.getCurrentUser().getUid();

                ticket.date = day + "/" + month;
                ticket.time = hour + ":00";
                ticket.room = roomid;
                ticket.row = seat.row;
                ticket.seat = seat.seat;

                ticket.ticketid = movieid + ":" + roomid + ":" + seat.row + ":" + seat.seat;

//                    The ticket data related to the film will be retrieved from the database and added later (name, image, etc.):
                ticketsToBuy.add(ticket);
            }
        }
        TicketListBoughtFragment ticketListBoughtFragment = new TicketListBoughtFragment(ticketsToBuy, cinemaid, frameComingFrom);
        setFragment(ticketListBoughtFragment);
    }

    private void showSeats() {
        seatsGrid.setAdapter(new SeatAdapter(seats, requireContext()));

        GridLayoutManager gridLayoutManager = new GridLayoutManager(requireContext(), 8, RecyclerView.VERTICAL, false);
        seatsGrid.setLayoutManager(gridLayoutManager);
        seatsGrid.setNestedScrollingEnabled(false);
    }


    private void insertDefaultSeats() {
        db.collection("movie_sessions").
                document(movieid + "").
                collection("cinemas").
                document(cinemaid + "").
                collection("rooms").
                document(roomid + "").
                collection("sessions").
                document(month + "-" + day + "-" + hour).
                get().
                addOnSuccessListener(success -> {

                Models.Session session = success.toObject(Models.Session.class);

//                The session.seats is a list of numbers, each number represents a seat.
//                The numbers, for example are:
//                if the number is 50, it means the seat is in the 50/8 row and the 50%8 column. (8 is the number of seats in a row)

                seats.clear();
                for (int i = 0; i < 8 ; i++) {
                    for (int j = 0; j < 8 ; j++) {
                        Models.SeatState state = Models.SeatState.FREE;
                        if(session.seats.contains(i*8 + j)) {
                            state = Models.SeatState.BUSY;
                        }
                        seats.add(new Models.Seats(i, j, state));
                    }
                }
                showSeats();
            });


    }
    private void setFragment(Fragment fragment) {
        if(frameComingFrom != 0) {
            getFragmentManager()
                    .beginTransaction()
                    .replace(frameComingFrom, fragment)
                    .addToBackStack(SeatsFragment.class.getSimpleName())
                    .commit();
        } else {
            getFragmentManager()
                    .beginTransaction()
                    .replace(R.id.frame_detail, fragment)
                    .addToBackStack(SeatsFragment.class.getSimpleName())
                    .commit();
        }
    }

}